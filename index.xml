<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>SurejAJ's Notes</title><link>/</link><description>Recent content on SurejAJ's Notes</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Surej Joseph</copyright><lastBuildDate>Thu, 05 Jan 2023 22:36:07 -0600</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml"/><item><title>Zynq-7000 QSPI Clock Generation</title><link>/posts/zynq-qspi-clk/</link><pubDate>Thu, 05 Jan 2023 22:36:07 -0600</pubDate><guid>/posts/zynq-qspi-clk/</guid><description>Introduction This article, we will explore how to configure the QSPI controller clocks on Zynq-7000. It provide a brief overview of the QSPI clock generation block and also describes the how to configure the clock frequency in UBoot and Linux kernel.
Clock Generation Hardware The QSPI Controller on the Zynq is driven by a QSPI_REF_CLK. The QSPI_REF_CLK can be sourced from either ARM, DDR and IO PLL Blocks. After selecting the, clock source, the clock is further divided using a 6-bit divisor.</description><content>&lt;h1 id="introduction">Introduction&lt;/h1>
&lt;hr>
&lt;p>This article, we will explore how to configure the QSPI controller clocks
on Zynq-7000. It provide a brief overview of the QSPI clock generation block
and also describes the how to configure the clock frequency in UBoot and Linux
kernel.&lt;/p>
&lt;h1 id="clock-generation-hardware">Clock Generation Hardware&lt;/h1>
&lt;hr>
&lt;p>The QSPI Controller on the Zynq is driven by a QSPI_REF_CLK. The QSPI_REF_CLK
can be sourced from either ARM, DDR and IO PLL Blocks. After selecting the,
clock source, the clock is further divided using a 6-bit divisor. The divided
clock is passed through a clock gating block. Below is a block diagram
for the QSPI_REF_CLK generation:&lt;/p>
&lt;figure class="left" >
&lt;img src="./images/zynq_qspi_clk_blk.svg" />
&lt;/figure>
&lt;p>The QSPI_REF_CLK is generated by first selecting the PLL Block and then applying
a divisor. The divisor value can range from 0 to 128. This divisor value is
specified in Vivado:&lt;/p>
&lt;figure class="left" >
&lt;img src="./images/vivado_qspi_ref_clk.jpg" />
&lt;/figure>
&lt;p>In the above example, the QSPI_REF_CLK is sourced from IO PLL. The IO PLL
clock frequency is 1600Mhz. A divisor value of 20 is applied to device a 80Mhz
QSPI_REF_CLK.&lt;/p>
&lt;p>To generate the Quad-SPI interface clock, the QSPI_REF_CLK is divided down by 2,
4, 8, 16, 32, 64, 128, or 256 using the qspi.Config_reg [BAUD_RATE_DIV] bit field.&lt;/p>
&lt;h4 id="u-boot-qspi-clock-setting">U-Boot QSPI Clock Setting&lt;/h4>
&lt;h5 id="linux-kernel-qspi-clock-setting">Linux Kernel QSPI Clock Setting&lt;/h5>
&lt;pre tabindex="0">&lt;code>@qspi {
status = &amp;#34;okay&amp;#34;;
flash@0 {
spi-max-frequency = &amp;lt;40000000&amp;gt;;
};
};
&lt;/code>&lt;/pre>&lt;h1 id="reference">Reference&lt;/h1>
&lt;ol>
&lt;li>Zynq TRM Page number 359&lt;/li>
&lt;li>Zynq TRM Page number 688&lt;/li>
&lt;/ol></content></item><item><title>About Me</title><link>/aboutme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/aboutme/</guid><description>My name is Surej Joseph and i&amp;rsquo;ve been a Software Engineer for 15 years and counting. I live near Chicago and currently work for Shure Inc. I started this blog to note down my learnings working as a Software Engineer.
I&amp;rsquo;m also passinate about Woodworking, DIY Projects around the house, Salt water Reef tanks and travelling.
You can find my resume here</description><content>&lt;p>My name is Surej Joseph and i&amp;rsquo;ve been a Software Engineer for 15 years and
counting. I live near Chicago and currently work for Shure Inc. I started
this blog to note down my learnings working as a Software Engineer.&lt;/p>
&lt;p>I&amp;rsquo;m also passinate about Woodworking, DIY Projects around the house, Salt
water Reef tanks and travelling.&lt;/p>
&lt;p>You can find my resume &lt;a href="/resume/">here&lt;/a>&lt;/p></content></item><item><title>Surej Joseph</title><link>/resume/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/resume/</guid><description>Summary Seveteen years of experience as an Embedded Software Engineer. Embedded Software programming languages C, C++ and JAVA. Android Bootloader, Kernel and Framework internals. Scripting languages: Python and Bash. Porting of Android OS for Automotive Head Unit. Automotive communication protocols CAN and EAVB. Interfacing with external communication bus such as SPI and I2C. Debugging using Lauterbach Trace32 and GNU Debugger. Expert in Android Software update: Update Engine and Android Recovery. Android Build System - Makefile and Ninja Technical Skills Languages: C, C++, Java, Python.</description><content>&lt;h2 id="summary">Summary&lt;/h2>
&lt;ul>
&lt;li>Seveteen years of experience as an Embedded Software Engineer.&lt;/li>
&lt;li>Embedded Software programming languages C, C++ and JAVA.&lt;/li>
&lt;li>Android Bootloader, Kernel and Framework internals.&lt;/li>
&lt;li>Scripting languages: Python and Bash.&lt;/li>
&lt;li>Porting of Android OS for Automotive Head Unit.&lt;/li>
&lt;li>Automotive communication protocols CAN and EAVB.&lt;/li>
&lt;li>Interfacing with external communication bus such as SPI and I2C.&lt;/li>
&lt;li>Debugging using Lauterbach Trace32 and GNU Debugger.&lt;/li>
&lt;li>Expert in Android Software update: Update Engine and Android Recovery.&lt;/li>
&lt;li>Android Build System - Makefile and Ninja&lt;/li>
&lt;/ul>
&lt;h2 id="technical-skills">Technical Skills&lt;/h2>
&lt;ul>
&lt;li>Languages: C, C++, Java, Python.&lt;/li>
&lt;li>Operating Systems: Linux, Android.&lt;/li>
&lt;li>Build Tools: Makefile, Yocto, Ninja, Maven&lt;/li>
&lt;li>Designing Tools: Rational Rose, Rational DOORS NG&lt;/li>
&lt;li>Tools: Lauterbach Trace32, Wireshark, GDB&lt;/li>
&lt;li>Continuous Integration Tools: Jenkins, JIRA, Gerrit&lt;/li>
&lt;/ul>
&lt;h2 id="professional-experience">Professional Experience&lt;/h2>
&lt;p>Senior Software Engineer - Shure Inc, Chicago (4 years and counting)&lt;/p>
&lt;hr>
&lt;p>Senior Software Engineer - Verifone, Chicago (6months)&lt;/p>
&lt;hr>
&lt;p>Senior Software Engineer - Harman Kardon, Vernon Hills, IL (4 Year)&lt;/p>
&lt;hr>
&lt;p>Software Engineer - Motorola Mobility, Lenovo Company, Chicago, IL (9 Year)&lt;/p>
&lt;hr>
&lt;h2 id="github-projects">GitHub Projects&lt;/h2>
&lt;ul>
&lt;li>CAN - PiHAT - &lt;a href="https://github.com/surejaj/CAN-PiHAT">https://github.com/surejaj/CAN-PiHAT&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>A Raspberry Pi HAT (Hardware Attachment on Top) for enabling Automotive
CAN bus capability to Raspberry Pi. Schematic and PCB was designed using
Open source CAD tool - KiCAD. It allows software on Raspberry-Pi to transmit
and monitor data on High Speed and Single Wire CAN bus.&lt;/p>
&lt;h2 id="educational-background">Educational Background&lt;/h2>
&lt;ul>
&lt;li>Diploma in Advanced Computing (DAC) at the Center for Advanced Computing Bangalore&lt;/li>
&lt;li>Bachelor of Engineering in Computer Science Engineering from Bharathiar University, India.&lt;/li>
&lt;/ul></content></item></channel></rss>